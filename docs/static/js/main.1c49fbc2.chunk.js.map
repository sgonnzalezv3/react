{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem..js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6LAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAqB9C,OACI,sBAAMC,SAbW,SAACC,GAElBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAEvCN,EAAc,MAMlB,SACI,uBACAO,KAAK,OACLC,MAAST,EACTU,SAtBkB,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,aA0B/BZ,EAAYe,UAAY,CACpBd,c,OAAee,EAAUC,KAAKC,Y,mCCnCpBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEVC,EAFU,iDAEuCC,UAAUH,GAFjD,+DAIGI,MAAMF,GAJT,cAIVG,EAJU,gBAMOA,EAAKC,OANZ,uBAMRC,EANQ,EAMRA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZ1B,kBAgBTM,GAhBS,4CAAH,sDCARO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,uBAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAKGqB,EDnBuBK,CAAc1B,GAAjCa,EAJ0B,EAI/BN,KAAaa,EAJkB,EAIlBA,QAanB,OACI,qCACI,qBAAIJ,UAAU,mBAAd,cAAoChB,EAApC,OAEEoB,GAAW,mBAAGJ,UAAU,mBAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aE5BzBgB,EAAe,WAAM,MAEM7C,mBAAS,CAAC,WAFhB,mBAEvB8C,EAFuB,KAEX/C,EAFW,KAa/B,OACC,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ+C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCff6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1c49fbc2.chunk.js","sourcesContent":["\r\nimport React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategorias} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n\r\n            setCategorias(cats => [ inputValue, ...cats]);\r\n\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n            type=\"text\"\r\n            value = {inputValue}\r\n            onChange={handleInputChange}\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport  const getGifs = async (category) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HQPleGkkSk1HGUGWPlCpvZkgMk6dwkpi`;\r\n\r\n        const resp = await fetch(url);\r\n\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        \r\n        return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__bounce\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem.';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n   // const [images, setimages] = useState([]);\r\n\r\n   const {data:images, loading} = useFetchGifs( category );\r\n\r\n    /*\r\n    // se ejecuta la accion cuando el componente es renderizado por primera vez\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( setimages )\r\n    }, [ category ]);\r\n    */\r\n\r\n\r\n    //getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\" animate__bounce\"> { category } </h3>\r\n\r\n            { loading && <p className=\" animate__bounce\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n\r\n}\r\n\r\n\r\n","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categorias = ['Yugioh', 'Halo', 'Pepsiman'];\r\n    const [categorias, setCategorias] = useState(['Yugioh']);\r\n\r\n    /*\r\n    const handleAdd = () => {\r\n        \r\n        //setCategorias( [...categorias, 'Nemo'] );\r\n        setCategorias(cats =>[...cats, 'Messi'] );\r\n\r\n    }\r\n    */\r\n\r\n   return (\r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategorias={ setCategorias } />\r\n        <hr />\r\n\r\n        <ol>\r\n            {\r\n                categorias.map( category  => (\r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category }\r\n                    />\r\n                ))\r\n            }\r\n        </ol>\r\n\r\n    </>\r\n)\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}